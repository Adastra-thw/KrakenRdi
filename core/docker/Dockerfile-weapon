# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG VERSION=latest

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM <LAYER> IMAGE
	########################################
	ENV WORKDIR_FULL=${ROOT_DIR}/tools
	ENV WORKDIR_WEAPON=${WORKDIR_FULL}/weapon

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"

	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS

	########################################
	#	GLOBAL VARIABLES FROM WEAPON IMAGE
	########################################
	ARG WEAPON_CVE2018_20250=True
	ARG WEAPON_CVE2017_8759=True
	ARG WEAPON_CVE2017_8570=True
	ARG WEAPON_CVE2017_0199=True
	ARG WEAPON_DEMIGUISE=True
	ARG WEAPON_MALICIOUSMACROGENERATOR=True
	ARG WEAPON_OFFICEDDEPAYLOADS=True
	ARG WEAPON_DONTKILLMYCAT=True
	ARG WEAPON_EMBEDINHTML=True
	ARG WEAPON_MACRO_PACK=True
	ARG WEAPON_NTLM_THEFT=True
	ARG WEAPON_CVE2022_30190=True

	ENV WEAPON_CVE2018_20250 $WEAPON_CVE2018_20250
	ENV WEAPON_CVE2017_8759 $WEAPON_CVE2017_8759
	ENV WEAPON_CVE2017_8570 $WEAPON_CVE2017_8570
	ENV WEAPON_CVE2017_0199 $WEAPON_CVE2017_0199
	ENV WEAPON_DEMIGUISE $WEAPON_DEMIGUISE
	ENV WEAPON_MALICIOUSMACROGENERATOR $WEAPON_MALICIOUSMACROGENERATOR
	ENV WEAPON_OFFICEDDEPAYLOADS $WEAPON_OFFICEDDEPAYLOADS
	ENV WEAPON_DONTKILLMYCAT $WEAPON_DONTKILLMYCAT
	ENV WEAPON_EMBEDINHTML $WEAPON_EMBEDINHTML
	ENV WEAPON_MACRO_PACK $WEAPON_MACRO_PACK
	ENV WEAPON_NTLM_THEFT $WEAPON_NTLM_THEFT
	ENV WEAPON_CVE2022_30190 $WEAPON_CVE2022_30190

	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools netcat socat nano locate \
		python3 python3-dev python3-pip \
		python python-dev \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl \
		build-essential libpcap-dev libpq-dev libsqlite3-dev \
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

###################################################################################################################
# WEAPON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the Weaponization stage.						 								  
# TOOLS:
#	[^] CVE-2018-20250: https://github.com/JohnHammond/msdt-follina
#	[^] CVE-2017-8759: https://github.com/bhdresh/CVE-2017-8759 
#	[^] CVE-2017-8570: https://github.com/rxwx/CVE-2017-8570
#	[^] CVE-2017-0199: https://github.com/bhdresh/CVE-2017-0199
#	[^] Demiguise: https://github.com/nccgroup/demiguise
#	[^] Demiguise: https://github.com/nccgroup/demiguise
#	[^] MaliciousMacroGenerator: https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator
#	[^] Office DDE Payloads: https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads
#	[^] Dont Kill My Cat: https://github.com/Mr-Un1k0d3r/DKMC
#	[^] EmbedInHTML: https://github.com/Arno0x/EmbedInHTML
#	[^] NTLM_Theft: https://github.com/Greenwolf/ntlm_theft
#	[^] Macro_Pack: https://github.com/sevagas/macro_pack/releases/
#	[^] CVE-2022-30190: https://github.com/chvancooten/follina.py

###################################################################################################################
FROM base AS kraken-weapon
	LABEL author="Adastra"
	LABEL description="Layer for weapon stage."
	WORKDIR ${WORKDIR_WEAPON}
	SHELL ["/bin/bash", "-c"]

	RUN if [ "$WEAPON_CVE2018_20250" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/WyAtu/CVE-2018-20250 CVE2018_20250; fi ; \
		if [ "$WEAPON_CVE2017_8759" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/bhdresh/CVE-2017-8759 CVE2017_8759; fi ; \
		if [ "$WEAPON_CVE2017_8570" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/rxwx/CVE-2017-8570 CVE2017_8570; fi ; \
		if [ "$WEAPON_CVE2017_0199" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/bhdresh/CVE-2017-0199 CVE2017_0199; fi ; \
		if [ "$WEAPON_DEMIGUISE" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/nccgroup/demiguise; fi ; \
		if [ "$WEAPON_MALICIOUSMACROGENERATOR" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator; fi ; \
		if [ "$WEAPON_OFFICEDDEPAYLOADS" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads && cd Office-DDE-Payloads && pip install -r requirements.txt; fi ; \
		if [ "$WEAPON_DONTKILLMYCAT" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Mr-Un1k0d3r/DKMC && cd DKMC && mkdir output; fi ; \
		if [ "$WEAPON_EMBEDINHTML" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Arno0x/EmbedInHTML; fi ; \
		if [ "$WEAPON_NTLM_THEFT" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Greenwolf/ntlm_theft && pip3 install xlsxwriter; fi ; \
		if [ "$WEAPON_MACRO_PACK" = "True" ] ; then cd ${WORKDIR_WEAPON} && mkdir macro_pack && cd macro_pack && wget https://github.com/sevagas/macro_pack/releases/download/v2.2.0/macro_pack.exe; fi ; \
		if [ "$WEAPON_CVE2022_30190" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/JohnHammond/msdt-follina CVE2022_30190; fi
###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR ${WORKDIR_WEAPON}
	COPY --from=kraken-weapon ${WORKDIR_WEAPON} ${WORKDIR_WEAPON}

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	USER root
	SHELL ["/bin/bash", "-c"]
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_FULL} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_FULL}
	EXPOSE $EXPOSE_PORTS
	USER ${USERNAME}
	CMD tail -f /dev/null