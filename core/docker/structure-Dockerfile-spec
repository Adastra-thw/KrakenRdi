# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG ....

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM <LAYER> IMAGE
	########################################
	#WORKDIRS for every layer

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	#Global envs for the system.
	# This arguments will be used to control which software install, parameters like usernames
	# and passwords, versions for some tools, etc. 
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"

	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS

	########################################
	#	GLOBAL VARIABLES FROM <LAYER> IMAGE
	########################################
	# Arguments with ARGS instructions. The values in every ARG will be setted in the ENVs
	# Anything needed to compile or install tools.  
	# Environment variables with ARGS. All of this variables will recibe the values from 
	# the ARG represented with the same name. For example:
	# ARG USERNAME=Adastra.
	# ENV USERNAME $USERNAME

	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools netcat nano locate \
		python3 python3-dev python3-pip \
		python python-dev python-pip \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl \
		build-essential libpcap-dev libpq-dev libsqlite3-dev libsqlite3-0 \
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

	#######################################################
	#	DEPENDENCIES AND SOFTWARE FOR <LAYER> IMAGE
	#######################################################


###################################################################################################################
# <NAME OF LAYER> IMAGE 																							          
# DESCRIPTION:																									  
# Very short description.						 								  
# TOOLS:
#	[^] INSTALLED TOOL: URL
#	[^] INSTALLED TOOL: URL
#	[^] .....
###################################################################################################################
FROM base AS <NAME OF LAYER>
	LABEL author="Adastra"
	LABEL description="Layer for weapon stage."
	WORKDIR <WORKDIR DEFINED IN THE ENV VARIABLE>
	SHELL ["/bin/bash", "-c"]
	# Instructions to install software. For example, cloning repositories or download software.
	# This is justa intermediate layer, so here we can't install software with APT-GET, RVM, PIP 
	# or equivalent tools. That kind of installations should be performed in "composition" layer. 

###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR <WORKDIR DEFINED IN THE ENV VARIABLE FOR CURRENT LAYER>
	COPY --from=<NAME OF LAYER> ${WORKDIR DEFINED IN THE ENV VARIABLE} ${WORKDIR DEFINED IN THE ENV VARIABLE}
	#Installation of any program that needs Shared libraries needs to be run in the final image and just after the "COPY --from..." instruction.

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_FULL} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_FULL}
	USER ${USERNAME}
	EXPOSE $EXPOSE_PORTS
	CMD tail -f /dev/null