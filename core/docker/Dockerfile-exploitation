# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG VERSION=latest

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM EXPLOITATION IMAGE
	########################################
	ENV WORKDIR_EXPLOITATION=${WORKDIR_FULL}/4_exploitation

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"

	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS

	########################################
	#	GLOBAL VARIABLES FROM EXPLOITATION IMAGE
	########################################
	ARG EXPLOITATION_BURP=True
	ARG EXPLOITATION_ZAP=True
	ARG EXPLOITATION_CRACKMAPEXEC=True
	ARG EXPLOITATION_IMPACKET=True
	ARG EXPLOITATION_POWERSHELL=True

	ENV EXPLOITATION_BURP $EXPLOITATION_BURP
	ENV EXPLOITATION_ZAP $EXPLOITATION_ZAP
	ENV EXPLOITATION_CRACKMAPEXEC $EXPLOITATION_CRACKMAPEXEC
	ENV EXPLOITATION_IMPACKET $EXPLOITATION_IMPACKET
	ENV EXPLOITATION_POWERSHELL $EXPLOITATION_POWERSHELL
	
	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools netcat socat nano locate \
		python3 python3-dev python3-pip \
		python python-dev python-pip \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl \
		build-essential libpcap-dev libpq-dev libsqlite3-dev libsqlite3-0 \
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

###################################################################################################################
# EXPLOITATION IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the compromise stage.						 								  
# TOOLS:
#	[^] Burp: https://portswigger.net/burp
#	[^] ZAP: https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_Crossplatform.zip
#	[^] CrackMapExec: https://github.com/byt3bl33d3r/CrackMapExec
#	[^] Impacket: https://github.com/SecureAuthCorp/impacket/
#	[^] PowerShell (pwsh): https://github.com/PowerShell/PowerShell/releases/

###################################################################################################################
FROM base AS kraken-exploitation
	LABEL author="Adastra"
	LABEL description="Layer for exploitation stage."
	WORKDIR ${WORKDIR_EXPLOITATION}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to EXPLOITATION directory.
	COPY data/README-exploitation.txt ${WORKDIR_EXPLOITATION}

	RUN if [ "$EXPLOITATION_BURP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && mkdir Burp && cd Burp && curl "https://portswigger.net/burp/releases/download?product=community&version=2020.12.1&type=Jar" --output Burp-2020.12.1.jar ; fi ; \
		if [ "$EXPLOITATION_ZAP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && curl "https://github.com/zaproxy/zaproxy/releases/download/v2.10.0/ZAP_2.10.0_Crossplatform.zip" --output ZAP_2.10.0_Crossplatform.zip ; fi ; \
		if [ "$EXPLOITATION_CRACKMAPEXEC" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && wget https://github.com/byt3bl33d3r/CrackMapExec/releases/download/v5.1.1dev/cme-ubuntu-latest.4.zip && unzip cme-ubuntu-latest.4.zip && rm -rf cme-ubuntu-latest.4.zip; fi ; \
		if [ "$EXPLOITATION_IMPACKET" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && git clone https://github.com/SecureAuthCorp/impacket impacket; fi ; \
		if [ "$EXPLOITATION_POWERSHELL" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && curl -L  https://github.com/PowerShell/PowerShell/releases/download/v7.1.0/powershell-7.1.0-linux-x64.tar.gz -o /tmp/powershell.tar.gz && mkdir -p powershell/7 && tar zxf /tmp/powershell.tar.gz -C powershell/7 && chmod +x powershell/7/pwsh && ln -s ${WORKDIR_EXPLOITATION}/powershell/7/pwsh /usr/bin/pwsh; fi ;

###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR ${WORKDIR_EXPLOITATION}

	COPY --from=kraken-exploitation	${WORKDIR_EXPLOITATION} ${WORKDIR_EXPLOITATION}

	#Programs and dependencies for EXPLOITATION.
	RUN	if [ "$EXPLOITATION_IMPACKET" = "True" ] ; then cd ${WORKDIR_EXPLOITATION}/impacket && pip3 install requirements.txt ; fi ; \
		if [ "$EXPLOITATION_POWERSHELL" = "True" ] ; then cd ${WORKDIR_EXPLOITATION}/powershell/7 && apt-get install -y less locales ca-certificates libicu63 libssl1.1 libc6 libgcc1 libgssapi-krb5-2 liblttng-ust0 libstdc++6 ; fi ;

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	USER root
	SHELL ["/bin/bash", "-c"]
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_EXPLOITATION} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_EXPLOITATION}
	EXPOSE $EXPOSE_PORTS
	USER ${USERNAME}
	CMD tail -f /dev/null