# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG VERSION=latest

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM ALL IMAGES
	########################################
	ENV WORKDIR_FULL=${ROOT_DIR}/tools
	ENV WORKDIR_ANON=${WORKDIR_FULL}/0_anon
	ENV WORKDIR_RECON=${WORKDIR_FULL}/1_recon
	ENV WORKDIR_WEAPON=${WORKDIR_FULL}/2_weapon
	ENV WORKDIR_DELIVERY=${WORKDIR_FULL}/3_delivery
	ENV WORKDIR_EXPLOITATION=${WORKDIR_FULL}/4_exploitation
	ENV WORKDIR_ESCALATION=${WORKDIR_FULL}/5_escalation
	ENV WORKDIR_CANDC=${WORKDIR_FULL}/6_command_and_control
	ENV WORKDIR_INTERNALRECON=${WORKDIR_FULL}/7_internalrecon
	ENV WORKDIR_LATERALMOVEMENTS=${WORKDIR_FULL}/8_lateralmovements
	ENV WORKDIR_EXFILTRATION=${WORKDIR_FULL}/9_exfiltration
	ENV WORKDIR_COMMON=${WORKDIR_FULL}/common
	ENV WORKDIR_FRAMEWORK=${WORKDIR_FULL}/frameworks

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	ARG TOR_LATEST_VERSION=0.4.7.7
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"
	ARG RUBY_VERSION=3.0.0
	ARG RVM_DIR=/usr/local/rvm/
	ARG RVM_LOADER=/etc/profile.d/rvm.sh
	ARG POSTGRES_PASSWORD=postgres
	ARG POSTGRES_DB_NAME=database_pg
	ARG POSTGRES_DB_USERNAME=userdb
	ARG POSTGRES_DB_PASSWORD=password


	ENV TOR_LATEST_VERSION $TOR_LATEST_VERSION
	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS
	ENV RUBY_VERSION $RUBY_VERSION
	ENV RVM_DIR $RVM_DIR
	ENV RVM_LOADER $RVM_LOADER
	ENV POSTGRES_PASSWORD $POSTGRES_PASSWORD
	ENV POSTGRES_DB_NAME $POSTGRES_DB_NAME
	ENV POSTGRES_DB_USERNAME $POSTGRES_DB_USERNAME
	ENV POSTGRES_DB_PASSWORD $POSTGRES_DB_PASSWORD

	########################################
	#	GLOBAL VARIABLES FROM ALL IMAGES
	########################################
	########################################
	#	GLOBAL VARIABLES FROM ANON IMAGE
	########################################
	ARG ANON_TOR_SOURCE=False
	ARG ANON_TOR_APT=False
	ARG ANON_TORBROWSER=False
	ARG ANON_TORSOCKS=False
	ARG ANON_PROXYCHAINS=False

	ENV ANON_TOR_SOURCE $ANON_TOR_SOURCE
	ENV ANON_TOR_APT $ANON_TOR_APT
	ENV ANON_TORBROWSER $ANON_TORBROWSER
	ENV ANON_TORSOCKS $ANON_TORSOCKS
	ENV ANON_PROXYCHAINS $ANON_PROXYCHAINS

	########################################
	#	GLOBAL VARIABLES FROM RECON IMAGE
	########################################
	ARG RECON_RECONNG=False
	ARG RECON_PHOTON=False
	ARG RECON_THEHARVESTER=False
	ARG RECON_METAGOOFIL=False
	ARG RECON_SPIDERFOOT=False
	ARG RECON_MALTEGO=False
	ARG RECON_PHONEINFOGA=False
	ARG RECON_NMAP=False
	ARG RECON_SHERLOCK=True


	ENV RECON_RECONNG $RECON_RECONNG
	ENV RECON_PHOTON $RECON_PHOTON
	ENV RECON_THEHARVESTER $RECON_THEHARVESTER
	ENV RECON_METAGOOFIL $RECON_METAGOOFIL
	ENV RECON_SPIDERFOOT $RECON_SPIDERFOOT
	ENV RECON_MALTEGO $RECON_MALTEGO
	ENV RECON_PHONEINFOGA $RECON_PHONEINFOGA
	ENV RECON_NMAP $RECON_NMAP
	ENV RECON_SHERLOCK $RECON_SHERLOCK 


	########################################
	#	GLOBAL VARIABLES FROM WEAPON IMAGE
	########################################
	ARG WEAPON_CVE2018_20250=False
	ARG WEAPON_CVE2017_8759=False
	ARG WEAPON_CVE2017_8570=False
	ARG WEAPON_CVE2017_0199=False
	ARG WEAPON_DEMIGUISE=False
	ARG WEAPON_MALICIOUSMACROGENERATOR=False
	ARG WEAPON_OFFICEDDEPAYLOADS=False
	ARG WEAPON_DONTKILLMYCAT=False
	ARG WEAPON_EMBEDINHTML=False
	ARG WEAPON_MACRO_PACK=False
	ARG WEAPON_NTLM_THEFT=True

	ENV WEAPON_CVE2018_20250 $WEAPON_CVE2018_20250
	ENV WEAPON_CVE2017_8759 $WEAPON_CVE2017_8759
	ENV WEAPON_CVE2017_8570 $WEAPON_CVE2017_8570
	ENV WEAPON_CVE2017_0199 $WEAPON_CVE2017_0199
	ENV WEAPON_DEMIGUISE $WEAPON_DEMIGUISE
	ENV WEAPON_MALICIOUSMACROGENERATOR $WEAPON_MALICIOUSMACROGENERATOR
	ENV WEAPON_OFFICEDDEPAYLOADS $WEAPON_OFFICEDDEPAYLOADS
	ENV WEAPON_DONTKILLMYCAT $WEAPON_DONTKILLMYCAT
	ENV WEAPON_EMBEDINHTML $WEAPON_EMBEDINHTML
	ENV WEAPON_MACRO_PACK $WEAPON_MACRO_PACK
	ENV WEAPON_NTLM_THEFT $WEAPON_NTLM_THEFT

	########################################
	#	GLOBAL VARIABLES FROM WEAPON IMAGE
	########################################

	########################################
	#	GLOBAL VARIABLES FROM DELIVERY IMAGE
	########################################

	########################################
	#	GLOBAL VARIABLES FROM EXPLOITATION IMAGE
	########################################
	ARG EXPLOITATION_BURP=False
	ARG EXPLOITATION_ZAP=False
	ARG EXPLOITATION_CRACKMAPEXEC=False
	ARG EXPLOITATION_IMPACKET=False
	ARG EXPLOITATION_POWERSHELL=False
	ARG EXPLOITATION_SMBMAP=False


	ENV EXPLOITATION_BURP $EXPLOITATION_BURP
	ENV EXPLOITATION_ZAP $EXPLOITATION_ZAP
	ENV EXPLOITATION_CRACKMAPEXEC $EXPLOITATION_CRACKMAPEXEC
	ENV EXPLOITATION_IMPACKET $EXPLOITATION_IMPACKET
	ENV EXPLOITATION_POWERSHELL $EXPLOITATION_POWERSHELL
	ENV EXPLOITATION_SMBMAP $EXPLOITATION_SMBMAP


	########################################
	#	GLOBAL VARIABLES FROM ESCALATION PRIVILEGES IMAGE
	########################################
	ARG ESCALATION_BEROOT=False
	ARG ESCALATION_LINENUM=False
	ARG ESCALATION_LINUX_EXPLOIT_SUGGESTER=False
	ARG ESCALATION_LINUX_PRIV_CHECKER=False
	ARG ESCALATION_LINUX_SMART_ENUMERATION=False
	ARG ESCALATION_JAWS=False
	ARG ESCALATION_WESNG=False
	ARG ESCALATION_WINDOWSENUM=False

	ENV ESCALATION_BEROOT $ESCALATION_BEROOT
	ENV ESCALATION_LINENUM $ESCALATION_LINENUM
	ENV ESCALATION_LINUX_EXPLOIT_SUGGESTER $ESCALATION_LINUX_EXPLOIT_SUGGESTER
	ENV ESCALATION_LINUX_PRIV_CHECKER $ESCALATION_LINUX_PRIV_CHECKER 
	ENV ESCALATION_LINUX_SMART_ENUMERATION $ESCALATION_LINUX_SMART_ENUMERATION
	ENV ESCALATION_JAWS $ESCALATION_JAWS
	ENV ESCALATION_WESNG $ESCALATION_WESNG
	ENV ESCALATION_WINDOWSENUM $ESCALATION_WINDOWSENUM

	########################################
	#	GLOBAL VARIABLES FROM COMMAND AND CONTROL IMAGE
	########################################

	########################################
	#	GLOBAL VARIABLES FROM INTERNAL RECONNAISSANCE IMAGE
	########################################

	########################################
	#	GLOBAL VARIABLES FROM MOVE LATERALLY IMAGE
	########################################

	########################################
	#	GLOBAL VARIABLES FROM EXFILTRATION IMAGE
	########################################
	ARG EXFILTRATION_MISTICA=False
	
	ENV EXFILTRATION_MISTICA $EXFILTRATION_MISTICA
	

	########################################
	#	GLOBAL VARIABLES FROM FRAMEWORK IMAGE
	########################################
	ARG FRAMEWORK_METASPLOIT=False
	ARG FRAMEWORK_BEEF=False
	ARG FRAMEWORK_BETTERCAP=False

	ENV FRAMEWORK_METASPLOIT $FRAMEWORK_METASPLOIT
	ENV FRAMEWORK_BEEF $FRAMEWORK_BEEF
	ENV FRAMEWORK_BETTERCAP $FRAMEWORK_BETTERCAP

	########################################
	#	GLOBAL VARIABLES FROM COMMON IMAGE
	########################################
	ARG COMMON_THC_HYDRA=False
	ARG COMMON_CWEL=False
	ARG COMMON_POSTMAN=False
	ARG COMMON_FUZZDB=False
	ARG COMMON_DIRBUSTER=False
	ARG COMMON_SSLH=False
	ARG COMMON_HASHIDENTIFIER=False
	ARG WEAPON_CVE2022_30190=True

	ENV COMMON_THC_HYDRA $COMMON_THC_HYDRA
	ENV COMMON_CWEL $COMMON_CWEL
	ENV COMMON_POSTMAN $COMMON_POSTMAN
	ENV COMMON_FUZZDB $COMMON_FUZZDB
	ENV COMMON_DIRBUSTER $COMMON_DIRBUSTER
	ENV COMMON_SSLH=$COMMON_SSLH
	ENV COMMON_HASHIDENTIFIER $COMMON_HASHIDENTIFIER
	ENV WEAPON_CVE2022_30190 $WEAPON_CVE2022_30190

	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools netcat socat nano locate \
		python3 python3-dev python3-pip \
		python python-dev \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl libgbm-dev \
		build-essential libpcap-dev libpq-dev libsqlite3-dev libconfig-dev libwrap0-dev libsystemd-dev \ 
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

	#######################################################
	#	DEPENDENCIES AND SOFTWARE FOR FRAMEWORKS IMAGE
	#######################################################

	#Installation for RVM 
	RUN	curl -sSL https://get.rvm.io | bash \
		&& source ${RVM_LOADER} \
		&& rvm install ${RUBY_VERSION} \
		&& usermod -a -G rvm ${USERNAME} \
		&& newgrp rvm \
		&& source ${RVM_LOADER}

	#Installation for PostgreSQL.
	RUN apt-get -y install postgresql postgresql-client postgresql-contrib postgresql-common
	USER postgres
	RUN	/etc/init.d/postgresql start && \
		psql --command "CREATE USER ${POSTGRES_DB_USERNAME} WITH SUPERUSER PASSWORD '${POSTGRES_DB_PASSWORD}';" && \
		createdb -O ${POSTGRES_DB_USERNAME} ${POSTGRES_DB_NAME}
	USER root

	#Installation of dependencies for Beef.
	RUN if [ "$FRAMEWORK_BEEF" = "True" ] ; then \
			apt-get -y install build-essential libreadline6-dev libyaml-dev sqlite3 \
			libxml2-dev libxslt1-dev libc6-dev libncurses5-dev bison nodejs ruby-dev \
			libcurl4-openssl-dev; fi

	#Installation of dependencies for Bettercap.
	RUN if [ "$FRAMEWORK_BETTERCAP" = "True" ] ; then \
			apt-get -y install libusb-1.0-0-dev libnetfilter-queue-dev golang; fi

	#Installation of dependencies for THW Hydra.
	RUN if [ "$COMMON_THC_HYDRA" = "True" ] ; then \
			apt-get update && apt-get -y install libssh-dev libidn11-dev libpcre3-dev \
                 libgtk2.0-dev libmariadb-dev-compat libmariadb-dev libsvn-dev \
                 firebird-dev libmemcached-dev libgpg-error-dev \
                 libgcrypt20-dev; fi

###################################################################################################################
# ANON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the Anonymity stage.						 								  
# TOOLS:
#	[^] TOR
#	[^] TorBrowser
#	[^] Torsocks
#	[^] Proxychains
#	[^] ONION sites List.
###################################################################################################################
FROM base AS kraken-anon
	LABEL author="Adastra"
	LABEL description="Layer for anon stage."
	WORKDIR ${WORKDIR_ANON}
	SHELL ["/bin/bash", "-c"]
	COPY data/onionsites.txt ${WORKDIR_ANON}
	COPY data/README-anon.txt ${WORKDIR_ANON}
	COPY data/torrc ${WORKDIR_ANON}

	RUN if [ "$ANON_TORBROWSER" = "True" ] ; then wget https://www.torproject.org/dist/torbrowser/11.0.11/tor-browser-linux64-11.0.11_en-US.tar.xz && tar -xvf tor-browser-linux64-11.0.11_en-US.tar.xz && rm -rf tor-browser-linux64-11.0.11_en-US.tar.xz; fi ; \
		if [ "$ANON_TOR_SOURCE" = "True" ] ; then wget https://dist.torproject.org/tor-${TOR_LATEST_VERSION}.tar.gz && tar -xvf tor-${TOR_LATEST_VERSION}.tar.gz && rm -rf tor-${TOR_LATEST_VERSION}.tar.gz && mv tor-${TOR_LATEST_VERSION} tor-latest; fi ; 


###################################################################################################################
# RECON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the Intelligence gathering stage.						 								  
# TOOLS:																										  
#	[^]	Recon-ng: https://github.com/lanmaster53/recon-ng
#	[^] Photon: https://github.com/s0md3v/Photon
#	[^] theHarvester: https://github.com/laramies/theHarvester
#	[^] metagoofil: https://github.com/laramies/metagoofil
#	[^] Maltego: https://www.paterva.com/web7/downloads.php 			#	[^] Spiderfoot: https://github.com/smicallef/spiderfoot
#	[^] Nmap: https://github.com/nmap/nmap.git
#	[^] Sherlock: https://github.com/sherlock-project/sherlock.git
#	[^] PhoneInfoga: https://github.com/sundowndev/phoneinfoga/

###################################################################################################################
FROM base AS kraken-recon
	LABEL author="Adastra"
	LABEL description="Layer for recon stage."
	ENV ROOT_DIR /redteam
	WORKDIR ${WORKDIR_RECON}
	SHELL ["/bin/bash", "-c"]
	COPY data/README-recon.txt ${WORKDIR_RECON}

	RUN if [ "$RECON_RECONNG" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/lanmaster53/recon-ng.git ; fi ; \
		if [ "$RECON_PHOTON" = "True" ] ; then cd ${WORKDIR_RECON} &&  git clone https://github.com/s0md3v/Photon ; fi ; \
		if [ "$RECON_THEHARVESTER" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/laramies/theHarvester ; fi ; \
		if [ "$RECON_METAGOOFIL" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/laramies/metagoofil ; fi ; \
		if [ "$RECON_SPIDERFOOT" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/smicallef/spiderfoot.git ; fi ; \
		if [ "$RECON_MALTEGO" = "True" ] ; then cd ${WORKDIR_RECON} && mkdir maltego && cd maltego && wget https://maltego-downloads.s3.us-east-2.amazonaws.com/linux/Maltego.v4.3.0.linux.zip && unzip Maltego.v4.3.0.linux.zip ; fi ; \
		if [ "$RECON_PHONEINFOGA" = "True" ] ; then cd ${WORKDIR_RECON} && mkdir phoneinfoga && cd phoneinfoga && curl -L "https://github.com/sundowndev/phoneinfoga/releases/download/v2.0.5/phoneinfoga_$(uname -s)_$(uname -m).tar.gz" -o phoneinfoga.tar.gz && tar xvf phoneinfoga.tar.gz && rm -rf phoneinfoga.tar.gz; fi ; \
		if [ "$RECON_SHERLOCK" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/sherlock-project/sherlock ; fi ; \	
		if [ "$RECON_NMAP" = "True" ] ; then cd ${WORKDIR_RECON} && git clone https://github.com/nmap/nmap.git; fi

###################################################################################################################
# WEAPON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the Weaponization stage.						 								  
# TOOLS:
#	[^] CVE-2018-20250: https://github.com/WyAtu/CVE-2018-20250
#	[^] CVE-2017-8759: https://github.com/bhdresh/CVE-2017-8759 
#	[^] CVE-2017-8570: https://github.com/rxwx/CVE-2017-8570
#	[^] CVE-2017-0199: https://github.com/bhdresh/CVE-2017-0199
#	[^] Demiguise: https://github.com/nccgroup/demiguise
#	[^] Demiguise: https://github.com/nccgroup/demiguise
#	[^] MaliciousMacroGenerator: https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator
#	[^] Office DDE Payloads: https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads
#	[^] Dont Kill My Cat: https://github.com/Mr-Un1k0d3r/DKMC
#	[^] EmbedInHTML: https://github.com/Arno0x/EmbedInHTML
#	[^] NTLM_Theft: https://github.com/Greenwolf/ntlm_theft
#	[^] Macro_Pack: https://github.com/sevagas/macro_pack/releases/
#	[^] CVE-2022-30190: https://github.com/chvancooten/follina.py

###################################################################################################################
FROM base AS kraken-weapon
	LABEL author="Adastra"
	LABEL description="Layer for weapon stage."
	WORKDIR ${WORKDIR_WEAPON}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to WEAPON directory.
	COPY data/README-weapon.txt ${WORKDIR_WEAPON}

	RUN if [ "$WEAPON_CVE2018_20250" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/WyAtu/CVE-2018-20250 CVE2018_20250; fi ; \
		if [ "$WEAPON_CVE2017_8759" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/bhdresh/CVE-2017-8759 CVE2017_8759; fi ; \
		if [ "$WEAPON_CVE2017_8570" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/rxwx/CVE-2017-8570 CVE2017_8570; fi ; \
		if [ "$WEAPON_CVE2017_0199" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/bhdresh/CVE-2017-0199 CVE2017_0199; fi ; \
		if [ "$WEAPON_DEMIGUISE" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/nccgroup/demiguise; fi ; \
		if [ "$WEAPON_MALICIOUSMACROGENERATOR" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Mr-Un1k0d3r/MaliciousMacroGenerator; fi ; \
		if [ "$WEAPON_OFFICEDDEPAYLOADS" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/0xdeadbeefJERKY/Office-DDE-Payloads && cd Office-DDE-Payloads && pip install -r requirements.txt; fi ; \
		if [ "$WEAPON_DONTKILLMYCAT" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Mr-Un1k0d3r/DKMC && cd DKMC && mkdir output; fi ; \
		if [ "$WEAPON_EMBEDINHTML" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Arno0x/EmbedInHTML; fi ; \
		if [ "$WEAPON_NTLM_THEFT" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/Greenwolf/ntlm_theft && pip3 install xlsxwriter; fi ; \
		if [ "$WEAPON_MACRO_PACK" = "True" ] ; then cd ${WORKDIR_WEAPON} && mkdir macro_pack && cd macro_pack && wget https://github.com/sevagas/macro_pack/releases/download/v1.7/macro_pack.exe; fi ; \
		if [ "$WEAPON_CVE2022_30190" = "True" ] ; then cd ${WORKDIR_WEAPON} && git clone https://github.com/JohnHammond/msdt-follina CVE2022_30190; fi

###################################################################################################################
# DELIVERY IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the Delivery stage.						 								  
# TOOLS:																										  
#	[^] XXXX: 														  
###################################################################################################################
FROM base AS kraken-delivery
	LABEL author="Adastra"
	LABEL description="Layer for Delivery stage."
	WORKDIR ${WORKDIR_DELIVERY}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to DELIVERY directory.
	COPY data/README-delivery.txt ${WORKDIR_DELIVERY}

###################################################################################################################
# EXPLOITATION IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the compromise stage.						 								  
# TOOLS:
#	[^] Burp: https://portswigger.net/burp
#	[^] ZAP: https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2.11.1_Crossplatform.zip
#	[^] CrackMapExec: https://github.com/byt3bl33d3r/CrackMapExec
#	[^] Impacket: https://github.com/SecureAuthCorp/impacket/
#	[^] PowerShell (pwsh): https://github.com/PowerShell/PowerShell/releases/
#	[^] SMBMap: https://github.com/ShawnDEvans/smbmap


###################################################################################################################
FROM base AS kraken-exploitation
	LABEL author="Adastra"
	LABEL description="Layer for exploitation stage."
	WORKDIR ${WORKDIR_EXPLOITATION}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to EXPLOITATION directory.
	COPY data/README-exploitation.txt ${WORKDIR_EXPLOITATION}

	RUN if [ "$EXPLOITATION_BURP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && mkdir Burp && cd Burp && curl "https://portswigger.net/burp/releases/download?product=community&type=Jar" --output Burp-latest.jar ; fi ; \
		if [ "$EXPLOITATION_ZAP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && curl "https://github.com/zaproxy/zaproxy/releases/download/v2.11.1/ZAP_2.11.1_Crossplatform.zip" --output ZAP_2.10.0_Crossplatform.zip ; fi ; \
		if [ "$EXPLOITATION_CRACKMAPEXEC" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && wget https://github.com/Porchetta-Industries/CrackMapExec/releases/download/v5.3.0/cme-ubuntu-latest-3.10.zip && unzip cme-ubuntu-latest-3.10.zip && rm -rf cme-ubuntu-latest-3.10.zip; fi ; \
		if [ "$EXPLOITATION_IMPACKET" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && git clone https://github.com/SecureAuthCorp/impacket impacket; fi ; \
		if [ "$EXPLOITATION_SMBMAP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && git clone https://github.com/ShawnDEvans/smbmap smbmap; fi ; \
		if [ "$EXPLOITATION_POWERSHELL" = "True" ] ; then cd ${WORKDIR_EXPLOITATION} && curl -L  https://github.com/PowerShell/PowerShell/releases/download/v7.1.0/powershell-7.1.0-linux-x64.tar.gz -o /tmp/powershell.tar.gz && mkdir -p powershell/7 && tar zxf /tmp/powershell.tar.gz -C powershell/7 && chmod +x powershell/7/pwsh && ln -s ${WORKDIR_EXPLOITATION}/powershell/7/pwsh /usr/bin/pwsh; fi ;


###################################################################################################################
# ESCALATION PRIVILEGES 																							          
# DESCRIPTION:																									  
# Include the tools for the escalate privileges stage.						 								  
# TOOLS:																										  
#	[^] BeRoot:  https://github.com/AlessandroZ/BeRoot.git
#	[^] LinEnum: https://github.com/rebootuser/LinEnum
#	[^] Linux_Exploit_Suggester: https://github.com/InteliSecureLabs/Linux_Exploit_Suggester
#	[^] linuxprivchecker: https://github.com/sleventyeleven/linuxprivchecker
#	[^] linux-smart-enumeration: https://github.com/diego-treitos/linux-smart-enumeration
#	[^] JAWS: https://github.com/411Hall/JAWS
#	[^] WESNG: https://github.com/bitsadmin/wesng
#	[^] Windows-Enum:   https://github.com/absolomb/WindowsEnum 
###################################################################################################################
FROM base AS kraken-escalation
	LABEL author="Adastra"
	LABEL description="Layer for escalation stage."
	WORKDIR ${WORKDIR_ESCALATION}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to ESCALATION directory.
	COPY data/README-escalation.txt ${WORKDIR_ESCALATION}

	RUN if [ "$ESCALATION_BEROOT" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/AlessandroZ/BeRoot.git BeRoot; fi ; \
		if [ "$ESCALATION_LINENUM" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/rebootuser/LinEnum LinEnum; fi ; \
		if [ "$ESCALATION_LINUX_EXPLOIT_SUGGESTER" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/InteliSecureLabs/Linux_Exploit_Suggester Linux_Exploit_Suggester; fi ; \
		if [ "$ESCALATION_LINUX_PRIV_CHECKER" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/sleventyeleven/linuxprivchecker linuxprivchecker; fi ; \
		if [ "$ESCALATION_LINUX_SMART_ENUMERATION" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/diego-treitos/linux-smart-enumeration linux-smart-enumeration; fi ; \
		if [ "$ESCALATION_JAWS" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/411Hall/JAWS JAWS; fi ; \
		if [ "$ESCALATION_WESNG" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/bitsadmin/wesng wesng && cd Office-DDE-Payloads && pip install -r requirements.txt; fi ; \
		if [ "$ESCALATION_WINDOWSENUM" = "True" ] ; then cd ${WORKDIR_ESCALATION} && git clone https://github.com/absolomb/WindowsEnum && cd DKMC && mkdir output; fi


###################################################################################################################
# COMMAND AND CONTROL IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the C&C stage.						 								  
# TOOLS:																										  
#	[^] xxxx: 														  
###################################################################################################################
FROM base AS kraken-commandcontrol
	LABEL author="Adastra"
	LABEL description="Layer for command and control stage."
	WORKDIR ${WORKDIR_CANDC}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to COMMANDANDCONTROL directory.
	COPY data/README-commandandcontrol.txt ${WORKDIR_CANDC}


###################################################################################################################
# INTERNAL RECONNAISSANCE IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the INTERNAL RECON stage.						 								  
# TOOLS:																										  
#	[^] xxxx: 														  
###################################################################################################################
FROM base AS kraken-internalrecon
	LABEL author="Adastra"
	LABEL description="Layer for internal recon stage."
	WORKDIR ${WORKDIR_INTERNALRECON}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to INTERNALRECON directory.
	COPY data/README-internalrecon.txt ${WORKDIR_INTERNALRECON}

###################################################################################################################
# MOVE LATERALLY IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the lateral movements stage.						 								  
# TOOLS:																										  
#	[^] xxxx: 														  
###################################################################################################################
FROM base AS kraken-movelaterally
	LABEL author="Adastra"
	LABEL description="Layer for lateral movements stage."
	WORKDIR ${WORKDIR_LATERALMOVEMENTS}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to MOVELATERALLY directory.
	COPY data/README-movelaterally.txt ${WORKDIR_LATERALMOVEMENTS}

###################################################################################################################
# EXFILTRATION 	IMAGE																						          
# DESCRIPTION:																									  
# Include the tools for the exfiltration stage.						 								  
# TOOLS:																										  
#	[^] Mistica 
###################################################################################################################
FROM base AS kraken-exfiltration
	LABEL author="Adastra"
	LABEL description="Layer for exfiltration stage."
	WORKDIR ${WORKDIR_EXFILTRATION}
	SHELL ["/bin/bash", "-c"]
	#Copy resources to EXFILTRATION directory.
	COPY data/README-exfiltration.txt ${WORKDIR_EXFILTRATION}	
	
	RUN if [ "$EXFILTRATION_MISTICA" = "True" ] ; then cd ${WORKDIR_EXFILTRATION} && git clone https://github.com/IncideDigital/Mistica Mistica; fi

###################################################################################################################
# FRAMEWORK IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the frameworks stage.						 								  
# TOOLS:
#	[^] Metasploit Framework: https://github.com/rapid7/metasploit-framework.git
#	[^] Beef: https://github.com/beefproject/beef 
#	[^] BetterCap: https://github.com/bettercap/bettercap.git
###################################################################################################################
FROM base AS kraken-framework
	LABEL author="Adastra"
	LABEL description="Layer for framework stage."
	WORKDIR ${WORKDIR_FRAMEWORK}
	SHELL ["/bin/bash", "-c"]
	COPY data/README-frameworks.txt ${WORKDIR_RECON}

	RUN if [ "$FRAMEWORK_METASPLOIT" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/rapid7/metasploit-framework.git && chmod -R 777 metasploit-framework; fi ; \
		if [ "$FRAMEWORK_BEEF" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/beefproject/beef && chmod -R 777 beef; fi ; \
		if [ "$FRAMEWORK_BETTERCAP" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/bettercap/bettercap.git && cd bettercap && make build; fi

###################################################################################################################
# COMMON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the COMMON stage.						 								  
# TOOLS:
#	[^] THC-HYDRA: https://github.com/vanhauser-thc/thc-hydra
#	[^] CEWL: https://github.com/digininja/CeWL 
#	[^] POSTMAN: https://dl.pstmn.io/download/latest/linux64
#	[^] FuzzDB: https://github.com/fuzzdb-project/fuzzdb
#	[^] DirBuster: https://github.com/Adastra-thw/DirBuster-1.0
#	[^] Hash-Identifier: https://github.com/blackploit/hash-identifier
#	[^] SSLH: https://github.com/yrutschle/sslh
###################################################################################################################
FROM base AS kraken-common
	LABEL author="Adastra"
	LABEL description="Layer for transversal stage."
	WORKDIR ${WORKDIR_COMMON}
	SHELL ["/bin/bash", "-c"]

	RUN if [ "$COMMON_THC_HYDRA" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/vanhauser-thc/thc-hydra.git && cd thc-hydra && ./configure && make; fi ; \
		if [ "$COMMON_CWEL" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/digininja/CeWL.git cewl; fi ; \
		if [ "$COMMON_POSTMAN" = "True" ] ; then cd ${WORKDIR_COMMON} && wget https://dl.pstmn.io/download/latest/linux64 -O Postman.tar.gz && tar -xvf Postman.tar.gz && rm -rf Postman.tar.gz ; fi ; \
		if [ "$COMMON_FUZZDB" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/fuzzdb-project/fuzzdb.git ; fi ; \
		if [ "$COMMON_DIRBUSTER" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/Adastra-thw/DirBuster-1.0 DirBuster && cd DirBuster && tar -xvf DirBuster-1.0-RC1.tar.bz2 && rm -rf DirBuster-1.0-RC1.tar.bz2 ; fi ; \
		if [ "$COMMON_SSLH" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/yrutschle/sslh && cd sslh && make install ; fi ; \
		if [ "$COMMON_HASHIDENTIFIER" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/blackploit/hash-identifier Hash-Identifier ; fi ;

###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR ${WORKDIR_FULL}
	RUN mkdir ${WORKDIR_ANON} && mkdir ${WORKDIR_RECON} && \
		mkdir ${WORKDIR_WEAPON} && mkdir ${WORKDIR_DELIVERY} && \
		mkdir ${WORKDIR_EXPLOITATION} && mkdir ${WORKDIR_CANDC} && \
		mkdir ${WORKDIR_INTERNALRECON} && mkdir ${WORKDIR_LATERALMOVEMENTS} && \
		mkdir ${WORKDIR_ESCALATION} && mkdir ${WORKDIR_EXFILTRATION}  && \
		mkdir ${WORKDIR_FRAMEWORK} && mkdir ${WORKDIR_COMMON} 

	COPY --from=kraken-anon 			${WORKDIR_ANON} ${WORKDIR_ANON}
	COPY --from=kraken-recon 			${WORKDIR_RECON} ${WORKDIR_RECON}
	COPY --from=kraken-weapon			${WORKDIR_WEAPON} ${WORKDIR_WEAPON}
	COPY --from=kraken-delivery			${WORKDIR_DELIVERY} ${WORKDIR_DELIVERY}
	COPY --from=kraken-exploitation		${WORKDIR_EXPLOITATION} ${WORKDIR_EXPLOITATION}
	COPY --from=kraken-escalation		${WORKDIR_ESCALATION} ${WORKDIR_ESCALATION}
	COPY --from=kraken-commandcontrol	${WORKDIR_CANDC} ${WORKDIR_CANDC}
	COPY --from=kraken-internalrecon	${WORKDIR_INTERNALRECON} ${WORKDIR_INTERNALRECON}
	COPY --from=kraken-movelaterally	${WORKDIR_LATERALMOVEMENTS} ${WORKDIR_LATERALMOVEMENTS}
	COPY --from=kraken-exfiltration		${WORKDIR_EXFILTRATION} ${WORKDIR_EXFILTRATION}
	COPY --from=kraken-framework		${WORKDIR_FRAMEWORK} ${WORKDIR_FRAMEWORK}
	COPY --from=kraken-common			${WORKDIR_COMMON} ${WORKDIR_COMMON}

	#Programs and dependencies for ANON.
	RUN if [ "$ANON_TOR_SOURCE" = "True" ] ; then cd ${WORKDIR_ANON}/tor-latest && ./configure && make; fi ; \
		if [ "$ANON_TOR_APT" = "True" ] ; then apt-get -y install tor; fi ; \
		if [ "$ANON_TORSOCKS" = "True" ] ; then apt-get -y install torsocks; fi ; \
		if [ "$ANON_PROXYCHAINS" = "True" ] ; then apt-get -y install proxychains; fi

	#Programs and dependencies for RECON.
	RUN if [ "$RECON_RECONNG" = "True" ] ; then cd ${WORKDIR_RECON}/recon-ng && pip3 install -r REQUIREMENTS; fi ; \
		if [ "$RECON_PHOTON" = "True" ] ; then cd ${WORKDIR_RECON}/Photon && pip3 install -r requirements.txt ; fi ; \
		if [ "$RECON_THEHARVESTER" = "True" ] ; then cd ${WORKDIR_RECON}/theHarvester && pip3 install -r requirements/base.txt ; fi ; \
		if [ "$RECON_SPIDERFOOT" = "True" ] ; then cd ${WORKDIR_RECON}/spiderfoot &&  pip3 install -r requirements.txt ; fi ; \
		if [ "$RECON_SHERLOCK" = "True" ] ; then cd ${WORKDIR_RECON}/sherlock &&  pip3 install -r requirements.txt ; fi ; \
		if [ "$RECON_NMAP" = "True" ] ; then cd ${WORKDIR_RECON}/nmap && ./configure && make && make install; fi

	#Programs and dependencies for WEAPON.
	#Programs and dependencies for DELIVERY.
	#Programs and dependencies for EXPLOITATION.
	RUN	if [ "$EXPLOITATION_IMPACKET" = "True" ] ; then cd ${WORKDIR_EXPLOITATION}/impacket && pip3 install -r requirements.txt ; fi ; \
		if [ "$EXPLOITATION_SMBMAP" = "True" ] ; then cd ${WORKDIR_EXPLOITATION}/smbmap && pip3 install -r requirements.txt ; fi ; \
		if [ "$EXPLOITATION_POWERSHELL" = "True" ] ; then cd ${WORKDIR_EXPLOITATION}/powershell/7 && apt-get install -y less locales ca-certificates libicu63 libssl1.1 libc6 libgcc1 libgssapi-krb5-2 liblttng-ust0 libstdc++6 ; fi ;

	#Programs and dependencies for ESCALATION.
	#Programs and dependencies for COMMANDANDCONTROL.
	#Programs and dependencies for INTERNALRECON.
	#Programs and dependencies for LATERALMOVEMENTS.
	#Programs and dependencies for EXFILTRATION.
	RUN if [ "$EXFILTRATION_MISTICA" = "True" ] ; then cd ${WORKDIR_EXFILTRATION}/Mistica && pip3 install dnslib && python3 -m pip install pyinstaller && pyinstaller --onefile --hiddenimport overlay.client.io --hiddenimport overlay.client.shell --hiddenimport overlay.client.tcpconnect --hiddenimport overlay.client.tcplisten --hiddenimport wrapper.client.http --hiddenimport wrapper.client.dns --hiddenimport wrapper.client.icmp --hiddenimport overlay.server.io --hiddenimport overlay.server.shell --hiddenimport overlay.server.tcpconnect --hiddenimport overlay.server.tcplisten --hiddenimport wrapper.server.wrap_module.http --hiddenimport wrapper.server.wrap_module.dns --hiddenimport wrapper.server.wrap_module.icmp --hiddenimport wrapper.server.wrap_server.httpserver --hiddenimport wrapper.server.wrap_server.dnsserver --hiddenimport wrapper.server.wrap_server.icmpserver mc.py; fi

	#Programs and dependencies for FRAMEWORKS.
	USER ${USERNAME}
	RUN if [ "$FRAMEWORK_METASPLOIT" = "True" ] ; then \
			source ${RVM_LOADER} \
			&& rvm use ${RUBY_VERSION} \
			&& cd ${WORKDIR_FRAMEWORK}/metasploit-framework \
			&& gem install bundle && bundle install; fi ; \
		if [ "$FRAMEWORK_BEEF" = "True" ] ; then \
			source ${RVM_LOADER} \
			&& rvm use ${RUBY_VERSION} \
			&& cd ${WORKDIR_FRAMEWORK}/beef \
			&& bundle install; fi 

	#Programs and dependencies for COMMON.
	USER ${USERNAME}
	RUN	if [ "$COMMON_CWEL" = "True" ] ; then cd ${WORKDIR_COMMON} && \
			source ${RVM_LOADER} && rvm use ${RUBY_VERSION} && \
			cd ${WORKDIR_COMMON}/cewl && gem install bundle && bundle install; \
		fi ; 
	USER root

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	USER root
	SHELL ["/bin/bash", "-c"]
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_FULL} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_FULL}
	EXPOSE $EXPOSE_PORTS
	ENV NOTVISIBLE "in users profile"
	RUN sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd 
	COPY data/banner /etc/issue.net
	USER ${USERNAME}
	RUN echo "source ${RVM_LOADER}" >> ~/.bashrc && source ${RVM_LOADER} && rvm use ${RUBY_VERSION} 
	CMD tail -f /dev/null