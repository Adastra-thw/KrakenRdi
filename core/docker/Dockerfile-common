# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG VERSION=latest

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM <LAYER> IMAGE
	########################################
	ENV WORKDIR_FULL=${ROOT_DIR}/tools
	ENV WORKDIR_COMMON=${WORKDIR_FULL}/common

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"
	ARG RUBY_VERSION=3.0.0
	ARG RVM_DIR=/usr/local/rvm/
	ARG RVM_LOADER=/etc/profile.d/rvm.sh

	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS
	ENV RUBY_VERSION $RUBY_VERSION
	ENV RVM_DIR $RVM_DIR
	ENV RVM_LOADER $RVM_LOADER

	########################################
	#	GLOBAL VARIABLES FROM COMMON IMAGE
	########################################
	ARG COMMON_THC_HYDRA=True
	ARG COMMON_CWEL=True
	ARG COMMON_POSTMAN=True
	ARG COMMON_FUZZDB=True
	ARG COMMON_DIRBUSTER=True
	ARG COMMON_HASHIDENTIFIER=True
	ARG COMMON_SSLH=True

	ENV COMMON_THC_HYDRA $COMMON_THC_HYDRA
	ENV COMMON_CWEL $COMMON_CWEL
	ENV COMMON_POSTMAN $COMMON_POSTMAN
	ENV COMMON_FUZZDB $COMMON_FUZZDB
	ENV COMMON_DIRBUSTER $COMMON_DIRBUSTER
	ENV COMMON_HASHIDENTIFIER $COMMON_HASHIDENTIFIER
	ENV COMMON_SSLH $COMMON_SSLH


	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools netcat socat nano locate \
		python3 python3-dev python3-pip \
		python python-dev \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl \
		build-essential libpcap-dev libpq-dev \
		libsqlite3-dev libgbm-dev \ 
		libconfig-dev libwrap0-dev libsystemd-dev \
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

	#######################################################
	#	DEPENDENCIES AND SOFTWARE FOR COMMON IMAGE
	#######################################################
	#Installation for RVM 
	RUN	curl -sSL https://get.rvm.io | bash \
		&& source ${RVM_LOADER} \
		&& rvm install ${RUBY_VERSION} \
		&& usermod -a -G rvm ${USERNAME} \
		&& newgrp rvm \
		&& source ${RVM_LOADER}

	#Installation of dependencies for THW Hydra.
	RUN if [ "$COMMON_THC_HYDRA" = "True" ] ; then \
			apt-get update && apt-get -y install libssh-dev libidn11-dev libpcre3-dev \
                 libgtk2.0-dev libmariadb-dev-compat libmariadb-dev libsvn-dev \
                 firebird-dev libmemcached-dev libgpg-error-dev \
                 libgcrypt20-dev; fi

###################################################################################################################
# COMMON IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the COMMON stage.						 								  
# TOOLS:
#	[^] THC-HYDRA: https://github.com/vanhauser-thc/thc-hydra
#	[^] CEWL: https://github.com/digininja/CeWL 
#	[^] POSTMAN: https://dl.pstmn.io/download/latest/linux64
#	[^] FuzzDB: https://github.com/fuzzdb-project/fuzzdb
#	[^] DirBuster: https://github.com/Adastra-thw/DirBuster-1.0
#	[^] SSLH: https://github.com/yrutschle/sslh

###################################################################################################################
FROM base AS kraken-common
	LABEL author="Adastra"
	LABEL description="Layer for transversal stage."
	WORKDIR ${WORKDIR_COMMON}
	SHELL ["/bin/bash", "-c"]

	RUN if [ "$COMMON_THC_HYDRA" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/vanhauser-thc/thc-hydra.git && cd thc-hydra && ./configure && make; fi ; \
		if [ "$COMMON_CWEL" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/digininja/CeWL.git cewl; fi ; \
		if [ "$COMMON_POSTMAN" = "True" ] ; then cd ${WORKDIR_COMMON} && wget https://dl.pstmn.io/download/latest/linux64 -O Postman.tar.gz && tar -xvf Postman.tar.gz && rm -rf Postman.tar.gz ; fi ; \
		if [ "$COMMON_FUZZDB" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/fuzzdb-project/fuzzdb.git ; fi ; \
		if [ "$COMMON_DIRBUSTER" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/Adastra-thw/DirBuster-1.0 DirBuster && cd DirBuster && tar -xvf DirBuster-1.0-RC1.tar.bz2 && rm -rf DirBuster-1.0-RC1.tar.bz2 ; fi ; \
		if [ "$COMMON_SSLH" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/yrutschle/sslh && cd sslh && make install ; fi ; \
		if [ "$COMMON_HASHIDENTIFIER" = "True" ] ; then cd ${WORKDIR_COMMON} && git clone https://github.com/blackploit/hash-identifier Hash-Identifier ; fi ;

###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR ${WORKDIR_COMMON}
	COPY --from=kraken-common ${WORKDIR_COMMON} ${WORKDIR_COMMON}

	#Programs and dependencies for COMMON.
	USER ${USERNAME}
	RUN	if [ "$COMMON_CWEL" = "True" ] ; then cd ${WORKDIR_COMMON} && \
			source ${RVM_LOADER} && rvm use ${RUBY_VERSION} && \
			cd ${WORKDIR_COMMON}/cewl && gem install bundle && bundle install; \
		fi ; 
	USER root

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	USER root
	SHELL ["/bin/bash", "-c"]
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_FULL} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_FULL}
	EXPOSE $EXPOSE_PORTS
	USER ${USERNAME}
	RUN echo "source ${RVM_LOADER}" >> ~/.bashrc && source ${RVM_LOADER} && rvm use ${RUBY_VERSION} 
	CMD tail -f /dev/null