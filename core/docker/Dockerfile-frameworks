# Rapid Deployment Infrastructure for Red Teaming and Penetration Testing.
# Kraken RDI 
# Author: Adastra.
# Website: http://thehackerway.com 
# Github: https://github.com/Adastra-thw/KrakenRdi
# Simple command to generate a new image using this Dockerfile
# docker build -t adastra/KrakenRDI:<LAYER> -f Dockerfile-<LAYER> .


###################################################################################################################
# This Dockerfile uses multi-stage build patterns to include multiple configurations and inhereit common features 
# For more information about multi-stage buildings in Docker, please read the official documentation.             
# https://docs.docker.com/develop/develop-images/multistage-build/ 												  
###################################################################################################################

# Declaration of arguments to control the building flow and create images dynamically. 
ARG VERSION=latest

###################################################################################################################
# BASE IMAGE 																							          
# DESCRIPTION:																									  
# This will be the base image, the parent of every image declared in the project. 								  
# This will include the needed software to install the tools of every stage smothly.							  
###################################################################################################################
FROM debian:${VERSION} AS base
	LABEL author="Adastra"
	LABEL description="Layer with the needed libraries and software."
	ENV ROOT_DIR /redteam
	SHELL ["/bin/bash", "-c"]

	########################################
	#	WORKING DIRS FROM <LAYER> IMAGE
	########################################
	ENV WORKDIR_FULL=${ROOT_DIR}/tools
	ENV WORKDIR_FRAMEWORK=${WORKDIR_FULL}/frameworks

	########################################
	#	CONFIGURATION AND SYSTEM VARIABLES
	########################################
	ARG USERNAME=krakenrdi
	ARG PASSWORD=krakenrdi
	ARG EXPOSE_PORTS="22 80 443 3306 5432 8080 8081 8000"
	ARG RUBY_VERSION=3.0.0
	ARG RVM_DIR=/usr/local/rvm/
	ARG RVM_LOADER=/etc/profile.d/rvm.sh
	ARG POSTGRES_PASSWORD=postgres
	ARG POSTGRES_DB_NAME=database_pg
	ARG POSTGRES_DB_USERNAME=userdb
	ARG POSTGRES_DB_PASSWORD=password

	ENV USERNAME $USERNAME
	ENV PASSWORD $PASSWORD
	ENV EXPOSE_PORTS $EXPOSE_PORTS
	ENV RUBY_VERSION $RUBY_VERSION
	ENV RVM_DIR $RVM_DIR
	ENV RVM_LOADER $RVM_LOADER

	########################################
	#	GLOBAL VARIABLES FROM FRAMEWORK IMAGE
	########################################
	ARG FRAMEWORK_METASPLOIT=True
	ARG FRAMEWORK_BEEF=True
	ARG FRAMEWORK_BETTERCAP=True

	ENV FRAMEWORK_METASPLOIT $FRAMEWORK_METASPLOIT
	ENV FRAMEWORK_BEEF $FRAMEWORK_BEEF
	ENV FRAMEWORK_BETTERCAP $FRAMEWORK_BETTERCAP

	########################################
	#	BASE SOFTWARE INSTALLATION
	########################################
	RUN apt-get update && apt-get -y install net-tools socat netcat nano locate \
		python3 python3-dev python3-pip \
		python python-dev \
		unzip wget curl git gcc libc-dev libxslt-dev \
		openjdk-11-jre openjdk-11-jdk \
		libevent-dev libssl-dev zlib1g zlib1g-dev \
		firefox-esr xfce4-terminal \
		autoconf automake libtool apt-utils \
		openssh-server openssl \
		build-essential libpcap-dev libpq-dev libsqlite3-dev \
		software-properties-common sudo locate \
		&& useradd -m ${USERNAME} \
		&& echo "${USERNAME}:${PASSWORD}" | chpasswd \
		&& adduser ${USERNAME} sudo

	#######################################################
	#	DEPENDENCIES AND SOFTWARE FOR FRAMEWORKS IMAGE
	#######################################################

	#Installation for RVM 
	RUN	curl -sSL https://get.rvm.io | bash \
		&& source ${RVM_LOADER} \
		&& rvm install ${RUBY_VERSION} \
		&& usermod -a -G rvm ${USERNAME} \
		&& newgrp rvm \
		&& source ${RVM_LOADER}

	#Installation for PostgreSQL.
	RUN apt-get -y install postgresql postgresql-client postgresql-contrib postgresql-common
	USER postgres
	RUN	/etc/init.d/postgresql start && \
		psql --command "CREATE USER ${POSTGRES_DB_USERNAME} WITH SUPERUSER PASSWORD '${POSTGRES_DB_PASSWORD}';" && \
		createdb -O ${POSTGRES_DB_USERNAME} ${POSTGRES_DB_NAME}
	USER root

	#Installation of dependencies for Beef.
	RUN if [ "$FRAMEWORK_BEEF" = "True" ] ; then \
			apt-get -y install build-essential libreadline6-dev libyaml-dev sqlite3 \
			libxml2-dev libxslt1-dev libc6-dev libncurses5-dev bison nodejs ruby-dev \
			libcurl4-openssl-dev; fi

	#Installation of dependencies for Bettercap.
	RUN if [ "$FRAMEWORK_BETTERCAP" = "True" ] ; then \
			apt-get -y install libusb-1.0-0-dev libnetfilter-queue-dev golang; fi

###################################################################################################################
# FRAMEWORK IMAGE 																							          
# DESCRIPTION:																									  
# Include the tools for the frameworks stage.						 								  
# TOOLS:
#	[^] Metasploit Framework: https://github.com/rapid7/metasploit-framework.git
#	[^] Beef: https://github.com/beefproject/beef 
#	[^] BetterCap: https://github.com/bettercap/bettercap.git
###################################################################################################################
FROM base AS kraken-framework
	LABEL author="Adastra"
	LABEL description="Layer for framework stage."
	WORKDIR ${WORKDIR_FRAMEWORK}
	SHELL ["/bin/bash", "-c"]
	COPY data/README-frameworks.txt ${WORKDIR_RECON}

	RUN if [ "$FRAMEWORK_METASPLOIT" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/rapid7/metasploit-framework.git && chmod -R 777 metasploit-framework; fi ; \
		if [ "$FRAMEWORK_BEEF" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/beefproject/beef && chmod -R 777 beef; fi ; \
		if [ "$FRAMEWORK_BETTERCAP" = "True" ] ; then cd ${WORKDIR_FRAMEWORK} && git clone https://github.com/bettercap/bettercap.git && cd bettercap && make build; fi

###################################################################################################################
# COMPOSITION LAYER 																							          
# DESCRIPTION:																									  
# Include every layer of this Dockerfile to create the final composition										  
###################################################################################################################
FROM base as kraken-composition
	LABEL author="Adastra"
	LABEL description="Composition layer. Here everything gets prepared for the final image depending on the tools enabled."
	WORKDIR ${WORKDIR_FRAMEWORK}
	COPY --from=kraken-framework ${WORKDIR_FRAMEWORK} ${WORKDIR_FRAMEWORK}

	#Programs and dependencies for FRAMEWORKS.
	USER ${USERNAME}
	RUN if [ "$FRAMEWORK_METASPLOIT" = "True" ] ; then \
			source ${RVM_LOADER} \
			&& rvm use ${RUBY_VERSION} \
			&& cd ${WORKDIR_FRAMEWORK}/metasploit-framework \
			&& gem install bundle && bundle install; fi ; \
		if [ "$FRAMEWORK_BEEF" = "True" ] ; then \
			source ${RVM_LOADER} \
			&& rvm use ${RUBY_VERSION} \
			&& cd ${WORKDIR_FRAMEWORK}/beef \
			&& bundle install; fi 
	USER root

###################################################################################################################
# OUTPUT LAYER 																							          
# DESCRIPTION:																									  
# The final instructions before create the container. In this layer Docker will clean temporary files, 
# change the user, expose the defined ports and keeps the container up and running.										  
###################################################################################################################
FROM kraken-composition
	USER root
	SHELL ["/bin/bash", "-c"]
	RUN apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* && \
		chmod 700 -R ${WORKDIR_FULL} && chown ${USERNAME}:${USERNAME} -R ${WORKDIR_FULL}
	EXPOSE $EXPOSE_PORTS
	USER ${USERNAME}
	RUN echo "source ${RVM_LOADER}" >> ~/.bashrc && source ${RVM_LOADER} && rvm use ${RUBY_VERSION} 
	CMD tail -f /dev/null